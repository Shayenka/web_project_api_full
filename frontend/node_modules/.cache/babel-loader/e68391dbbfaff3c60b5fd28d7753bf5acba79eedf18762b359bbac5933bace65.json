{"ast":null,"code":"const BASE_URL = \"https://register.nomoreparties.co\";\nexport const registerUser = async (email, password) => {\n  return fetch(`${BASE_URL}/signup`, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  }).then(response => {\n    if (response.status === 201) {\n      return response.json();\n    }\n  }).then(res => {\n    return res;\n  });\n};\nexport const authorize = async (email, password, token) => {\n  try {\n    const response = await fetch(`${BASE_URL}/signin`, {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        email,\n        password\n      })\n    });\n    if (response.ok) {\n      const data = await response.json();\n      if (data && data.token) {\n        localStorage.setItem(\"jwt\", data.token);\n        return data;\n      } else {\n        console.error(\"La respuesta del servidor no contiene un token v치lido.\");\n      }\n    } else {\n      console.error(\"Error en la respuesta del servidor:\", response.status);\n    }\n  } catch (err) {\n    console.error(\"Error en la solicitud:\", err);\n  }\n};\nexport const checkTokenValidity = async token => {\n  const response = await fetch(`${BASE_URL}/users/me`, {\n    method: \"GET\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    }\n  });\n  if (response.ok) {\n    const data = await response.json();\n    return data;\n  } else {\n    throw new Error(\"Token inv치lido\");\n  }\n};","map":{"version":3,"names":["BASE_URL","registerUser","email","password","fetch","method","headers","Accept","body","JSON","stringify","then","response","status","json","res","authorize","token","Authorization","ok","data","localStorage","setItem","console","error","err","checkTokenValidity","Error"],"sources":["C:/Users/shaye/react-around-api-full_es/frontend/src/utils/auth.js"],"sourcesContent":["const BASE_URL = \"https://register.nomoreparties.co\";\r\n\r\nexport const registerUser = async (email, password) => {\r\n  return fetch(`${BASE_URL}/signup`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      Accept: \"application/json\",\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({ email, password }),\r\n  })\r\n    .then((response) => {\r\n      if (response.status === 201) {\r\n        return response.json();\r\n      }\r\n    })\r\n    .then((res) => {\r\n      return res;\r\n    });\r\n};\r\n\r\nexport const authorize = async (email, password, token) => {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/signin`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n      body: JSON.stringify({ email, password }),\r\n    });\r\n\r\n    if (response.ok) {\r\n      const data = await response.json();\r\n      if (data && data.token) {\r\n        localStorage.setItem(\"jwt\", data.token);\r\n        return data;\r\n      } else {\r\n        console.error(\"La respuesta del servidor no contiene un token v치lido.\");\r\n      }\r\n    } else {\r\n      console.error(\"Error en la respuesta del servidor:\", response.status);\r\n    }\r\n  } catch (err) {\r\n    console.error(\"Error en la solicitud:\", err);\r\n  }\r\n};\r\n\r\nexport const checkTokenValidity = async (token) => {\r\n  const response = await fetch(`${BASE_URL}/users/me`, {\r\n    method: \"GET\",\r\n    headers: {\r\n      Accept: \"application/json\",\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n  });\r\n\r\n  if (response.ok) {\r\n    const data = await response.json();\r\n    return data;\r\n  } else {\r\n    throw new Error(\"Token inv치lido\");\r\n  }\r\n};\r\n"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,mCAAmC;AAEpD,OAAO,MAAMC,YAAY,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;EACrD,OAAOC,KAAK,CAAE,GAAEJ,QAAS,SAAQ,EAAE;IACjCK,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACPC,MAAM,EAAE,kBAAkB;MAC1B,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAER,KAAK;MAAEC;IAAS,CAAC;EAC1C,CAAC,CAAC,CACCQ,IAAI,CAAEC,QAAQ,IAAK;IAClB,IAAIA,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;MAC3B,OAAOD,QAAQ,CAACE,IAAI,CAAC,CAAC;IACxB;EACF,CAAC,CAAC,CACDH,IAAI,CAAEI,GAAG,IAAK;IACb,OAAOA,GAAG;EACZ,CAAC,CAAC;AACN,CAAC;AAED,OAAO,MAAMC,SAAS,GAAG,MAAAA,CAAOd,KAAK,EAAEC,QAAQ,EAAEc,KAAK,KAAK;EACzD,IAAI;IACF,MAAML,QAAQ,GAAG,MAAMR,KAAK,CAAE,GAAEJ,QAAS,SAAQ,EAAE;MACjDK,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACPC,MAAM,EAAE,kBAAkB;QAC1B,cAAc,EAAE,kBAAkB;QAClCW,aAAa,EAAG,UAASD,KAAM;MACjC,CAAC;MACDT,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAER,KAAK;QAAEC;MAAS,CAAC;IAC1C,CAAC,CAAC;IAEF,IAAIS,QAAQ,CAACO,EAAE,EAAE;MACf,MAAMC,IAAI,GAAG,MAAMR,QAAQ,CAACE,IAAI,CAAC,CAAC;MAClC,IAAIM,IAAI,IAAIA,IAAI,CAACH,KAAK,EAAE;QACtBI,YAAY,CAACC,OAAO,CAAC,KAAK,EAAEF,IAAI,CAACH,KAAK,CAAC;QACvC,OAAOG,IAAI;MACb,CAAC,MAAM;QACLG,OAAO,CAACC,KAAK,CAAC,wDAAwD,CAAC;MACzE;IACF,CAAC,MAAM;MACLD,OAAO,CAACC,KAAK,CAAC,qCAAqC,EAAEZ,QAAQ,CAACC,MAAM,CAAC;IACvE;EACF,CAAC,CAAC,OAAOY,GAAG,EAAE;IACZF,OAAO,CAACC,KAAK,CAAC,wBAAwB,EAAEC,GAAG,CAAC;EAC9C;AACF,CAAC;AAED,OAAO,MAAMC,kBAAkB,GAAG,MAAOT,KAAK,IAAK;EACjD,MAAML,QAAQ,GAAG,MAAMR,KAAK,CAAE,GAAEJ,QAAS,WAAU,EAAE;IACnDK,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACPC,MAAM,EAAE,kBAAkB;MAC1B,cAAc,EAAE,kBAAkB;MAClCW,aAAa,EAAG,UAASD,KAAM;IACjC;EACF,CAAC,CAAC;EAEF,IAAIL,QAAQ,CAACO,EAAE,EAAE;IACf,MAAMC,IAAI,GAAG,MAAMR,QAAQ,CAACE,IAAI,CAAC,CAAC;IAClC,OAAOM,IAAI;EACb,CAAC,MAAM;IACL,MAAM,IAAIO,KAAK,CAAC,gBAAgB,CAAC;EACnC;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}